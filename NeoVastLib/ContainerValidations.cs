//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable FieldCanBeMadeReadOnly.Local
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Global
namespace NeoVastLib
{
    using System.Linq;

    public sealed partial class AdElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is InLineElement || e is WrapperElement))
            {
                this.validationFailureMessage = "children must only be InLineElement or WrapperElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is InLineElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one InLineElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is WrapperElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one WrapperElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class AdVerificationsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is VerificationElement))
            {
                this.validationFailureMessage = "children must only be VerificationElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is VerificationElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one VerificationElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class ClosedCaptionFilesElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is ClosedCaptionFileElement))
            {
                this.validationFailureMessage = "children must only be ClosedCaptionFileElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is ClosedCaptionFileElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one ClosedCaptionFileElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class CompanionElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is StaticResourceElement || e is IFrameResourceElement || e is HtmlResourceElement || e is AdParametersElement || e is AltTextElement || e is CompanionClickThroughElement || e is CompanionClickTrackingElement || e is TrackingEventsElement))
            {
                this.validationFailureMessage = "children must only be StaticResourceElement or IFrameResourceElement or HtmlResourceElement or AdParametersElement or AltTextElement or CompanionClickThroughElement or CompanionClickTrackingElement or TrackingEventsElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is StaticResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one StaticResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is IFrameResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IFrameResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is HtmlResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one HtmlResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdParametersElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AdParametersElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AltTextElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AltTextElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is CompanionClickThroughElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one CompanionClickThroughElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is TrackingEventsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one TrackingEventsElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class CompanionAdsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is CompanionElement))
            {
                this.validationFailureMessage = "children must only be CompanionElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is CompanionElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one CompanionElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class CreativeElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is UniversalAdIdElement || e is CreativeExtensionsElement || e is LinearElement || e is NonLinearAdsElement || e is CompanionAdsElement))
            {
                this.validationFailureMessage = "children must only be UniversalAdIdElement or CreativeExtensionsElement or LinearElement or NonLinearAdsElement or CompanionAdsElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is UniversalAdIdElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one UniversalAdIdElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is CreativeExtensionsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one CreativeExtensionsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is CompanionAdsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one CompanionAdsElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class CreativeExtensionsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is CreativeExtensionElement))
            {
                this.validationFailureMessage = "children must only be CreativeExtensionElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is CreativeExtensionElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one CreativeExtensionElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class CreativesElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is CreativeElement))
            {
                this.validationFailureMessage = "children must only be CreativeElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is CreativeElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one CreativeElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class ExtensionsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is ExtensionElement))
            {
                this.validationFailureMessage = "children must only be ExtensionElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is ExtensionElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one ExtensionElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class IconElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is StaticResourceElement || e is IFrameResourceElement || e is HtmlResourceElement || e is IconClicksElement || e is IconViewTrackingElement))
            {
                this.validationFailureMessage = "children must only be StaticResourceElement or IFrameResourceElement or HtmlResourceElement or IconClicksElement or IconViewTrackingElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is StaticResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one StaticResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is IFrameResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IFrameResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is HtmlResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one HtmlResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is IconClicksElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IconClicksElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class IconClicksElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is IconClickThroughElement || e is IconClickTrackingElement))
            {
                this.validationFailureMessage = "children must only be IconClickThroughElement or IconClickTrackingElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is IconClickThroughElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IconClickThroughElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class IconsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is IconElement))
            {
                this.validationFailureMessage = "children must only be IconElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is IconElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one IconElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class InLineElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is AdSystemElement || e is AdTitleElement || e is AdServingIdElement || e is ImpressionElement || e is CategoryElement || e is DescriptionElement || e is AdvertiserElement || e is PricingElement || e is SurveyElement || e is ErrorElement || e is ExtensionsElement || e is ViewableImpressionElement || e is AdVerificationsElement || e is CreativesElement || e is ExpiresElement))
            {
                this.validationFailureMessage = "children must only be AdSystemElement or AdTitleElement or AdServingIdElement or ImpressionElement or CategoryElement or DescriptionElement or AdvertiserElement or PricingElement or SurveyElement or ErrorElement or ExtensionsElement or ViewableImpressionElement or AdVerificationsElement or CreativesElement or ExpiresElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is AdSystemElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one AdSystemElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdTitleElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one AdTitleElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdServingIdElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one AdServingIdElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ImpressionElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one ImpressionElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is DescriptionElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one DescriptionElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdvertiserElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AdvertiserElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is PricingElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one PricingElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ExtensionsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ExtensionsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ViewableImpressionElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ViewableImpressionElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdVerificationsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AdVerificationsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is CreativesElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one CreativesElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ExpiresElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ExpiresElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class LinearElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is IconsElement || e is TrackingEventsElement || e is AdParametersElement || e is DurationElement || e is MediaFilesElement || e is VideoClicksElement))
            {
                this.validationFailureMessage = "children must only be IconsElement or TrackingEventsElement or AdParametersElement or DurationElement or MediaFilesElement or VideoClicksElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is IconsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IconsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is TrackingEventsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one TrackingEventsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdParametersElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AdParametersElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is DurationElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one DurationElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is VideoClicksElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one VideoClicksElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class MediaFilesElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is MezzanineElement || e is MediaFileElement || e is InteractiveCreativeFileElement || e is ClosedCaptionFilesElement))
            {
                this.validationFailureMessage = "children must only be MezzanineElement or MediaFileElement or InteractiveCreativeFileElement or ClosedCaptionFilesElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is MediaFileElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one MediaFileElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ClosedCaptionFilesElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ClosedCaptionFilesElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class NonLinearElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is StaticResourceElement || e is IFrameResourceElement || e is HtmlResourceElement || e is NonLinearClickThroughElement || e is NonLinearClickTrackingElement))
            {
                this.validationFailureMessage = "children must only be StaticResourceElement or IFrameResourceElement or HtmlResourceElement or NonLinearClickThroughElement or NonLinearClickTrackingElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is StaticResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one StaticResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is IFrameResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one IFrameResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is HtmlResourceElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one HtmlResourceElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is NonLinearClickThroughElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one NonLinearClickThroughElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class NonLinearAdsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is NonLinearElement || e is TrackingEventsElement))
            {
                this.validationFailureMessage = "children must only be NonLinearElement or TrackingEventsElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is NonLinearElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one NonLinearElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is TrackingEventsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one TrackingEventsElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class TrackingEventsElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is TrackingElement))
            {
                this.validationFailureMessage = "children must only be TrackingElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is TrackingElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one TrackingElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class VastElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is ErrorElement || e is AdElement))
            {
                this.validationFailureMessage = "children must only be ErrorElement or AdElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class VerificationElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is JavaScriptResourceElement || e is ExecutableResourceElement || e is TrackingEventsElement || e is VerificationParametersElement || e is BlockedAdCategoriesElement))
            {
                this.validationFailureMessage = "children must only be JavaScriptResourceElement or ExecutableResourceElement or TrackingEventsElement or VerificationParametersElement or BlockedAdCategoriesElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is TrackingEventsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one TrackingEventsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is VerificationParametersElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one VerificationParametersElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class VideoClicksElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is ClickThroughElement || e is ClickTrackingElement || e is CustomClickElement))
            {
                this.validationFailureMessage = "children must only be ClickThroughElement or ClickTrackingElement or CustomClickElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is ClickThroughElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ClickThroughElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class ViewableImpressionElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is ViewableElement || e is NotViewableElement || e is ViewUndeterminedElement))
            {
                this.validationFailureMessage = "children must only be ViewableElement or NotViewableElement or ViewUndeterminedElement";
                return false;
            }

            return true;
        }
    }

    public sealed partial class WrapperElement : VElement
    {
        protected override bool ValidateContained()
        {
            if (!this.HasElements)
            {
                this.validationFailureMessage = "must have children";
                return false;
            }

            if (!this.Elements().All(e => e is AdSystemElement || e is ImpressionElement || e is PricingElement || e is ErrorElement || e is ExtensionsElement || e is AdVerificationsElement || e is BlockedAdCategoriesElement || e is CreativesElement || e is VastAdTagUriElement))
            {
                this.validationFailureMessage = "children must only be AdSystemElement or ImpressionElement or PricingElement or ErrorElement or ExtensionsElement or AdVerificationsElement or BlockedAdCategoriesElement or CreativesElement or VastAdTagUriElement";
                return false;
            }

            if (!(this.Elements().Count(e => e is AdSystemElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one AdSystemElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ImpressionElement) >= 1))
            {
                this.validationFailureMessage = "must have at least one ImpressionElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is PricingElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one PricingElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is ExtensionsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one ExtensionsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is AdVerificationsElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one AdVerificationsElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is CreativesElement) <= 1))
            {
                this.validationFailureMessage = "must have at most one CreativesElement";
                return false;
            }


            if (!(this.Elements().Count(e => e is VastAdTagUriElement) == 1))
            {
                this.validationFailureMessage = "must have exactly one VastAdTagUriElement";
                return false;
            }

            return true;
        }
    }
}